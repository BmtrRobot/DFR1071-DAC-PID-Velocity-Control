
velosity_controller_for_DFR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef0  08002ef0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ef8  08002ef8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000001c  08002f1c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002f1c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0cb  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001abc  00000000  00000000  0002b15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ed  00000000  00000000  0002d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025985  00000000  00000000  0002de55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb1f  00000000  00000000  000537da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eac21  00000000  00000000  000602f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a6c  00000000  00000000  0014af1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0014d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ec8 	.word	0x08002ec8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	08002ec8 	.word	0x08002ec8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Delay_us>:
 *
 */

#include "DFR_i2c.h"

void Delay_us(uint32_t delay) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	// Calculate the number of CPU cycles for the delay
	// change CLOCK preprocessor if the SCL is not compatible with the micro-controller
	uint32_t cycles = CLOCK* delay;
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <Delay_us+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <Delay_us+0x44>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	0e1a      	lsrs	r2, r3, #24
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	60fb      	str	r3, [r7, #12]

	for (volatile uint32_t i = 0; i < cycles; i++) {
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	e003      	b.n	800052e <Delay_us+0x2a>
		__asm__ __volatile__("nop");
 8000526:	bf00      	nop
	for (volatile uint32_t i = 0; i < cycles; i++) {
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	3301      	adds	r3, #1
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	429a      	cmp	r2, r3
 8000534:	d8f7      	bhi.n	8000526 <Delay_us+0x22>
	}
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	20000010 	.word	0x20000010
 8000548:	ee9bfab5 	.word	0xee9bfab5

0800054c <dfr_i2c_start>:

void dfr_i2c_start(DFRobot_GP8XXX_IIC *gp8xxx) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

	/* Generate I2C start condition */
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	891b      	ldrh	r3, [r3, #8]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f001 fba6 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68d8      	ldr	r0, [r3, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	8a1b      	ldrh	r3, [r3, #16]
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	f001 fb9e 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ffc5 	bl	8000504 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_RESET);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	68d8      	ldr	r0, [r3, #12]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	8a1b      	ldrh	r3, [r3, #16]
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f001 fb93 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff ffba 	bl	8000504 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6858      	ldr	r0, [r3, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	891b      	ldrh	r3, [r3, #8]
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	f001 fb88 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f7ff ffaf 	bl	8000504 <Delay_us>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <dfr_i2c_stop>:

void dfr_i2c_stop(DFRobot_GP8XXX_IIC *gp8xxx) {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]

	/* Generate I2C stop condition */
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_RESET);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	68d8      	ldr	r0, [r3, #12]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	8a1b      	ldrh	r3, [r3, #16]
 80005be:	2200      	movs	r2, #0
 80005c0:	4619      	mov	r1, r3
 80005c2:	f001 fb75 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ff9c 	bl	8000504 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6858      	ldr	r0, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	891b      	ldrh	r3, [r3, #8]
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	f001 fb6a 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 80005dc:	2005      	movs	r0, #5
 80005de:	f7ff ff91 	bl	8000504 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68d8      	ldr	r0, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	8a1b      	ldrh	r3, [r3, #16]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	f001 fb5f 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 80005f2:	2005      	movs	r0, #5
 80005f4:	f7ff ff86 	bl	8000504 <Delay_us>

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <dfr_i2c_write_byte>:
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
	Delay_us(I2C_CYCLE_AFTER);

}

HAL_StatusTypeDef dfr_i2c_write_byte(DFRobot_GP8XXX_IIC *gp8xxx,uint8_t data) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]

	/* Write a byte to the I2C bus */
	for (int i = 0; i < 8; i++) {
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e028      	b.n	8000664 <dfr_i2c_write_byte+0x64>
		HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68d8      	ldr	r0, [r3, #12]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	8a19      	ldrh	r1, [r3, #16]
				(data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	09db      	lsrs	r3, r3, #7
 800061e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin,
 8000620:	461a      	mov	r2, r3
 8000622:	f001 fb45 	bl	8001cb0 <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_BEFORE);
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff ff6c 	bl	8000504 <Delay_us>
		HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6858      	ldr	r0, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	891b      	ldrh	r3, [r3, #8]
 8000634:	2201      	movs	r2, #1
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fb3a 	bl	8001cb0 <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_TOTAL);
 800063c:	2005      	movs	r0, #5
 800063e:	f7ff ff61 	bl	8000504 <Delay_us>
		HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6858      	ldr	r0, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	891b      	ldrh	r3, [r3, #8]
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	f001 fb2f 	bl	8001cb0 <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_AFTER);
 8000652:	2002      	movs	r0, #2
 8000654:	f7ff ff56 	bl	8000504 <Delay_us>
		data <<= 1;
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; i++) {
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b07      	cmp	r3, #7
 8000668:	ddd3      	ble.n	8000612 <dfr_i2c_write_byte+0x12>
	}

	// Check for ACK from slave, expecting 0
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68d8      	ldr	r0, [r3, #12]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	8a1b      	ldrh	r3, [r3, #16]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	f001 fb1b 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff ff42 	bl	8000504 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6858      	ldr	r0, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	891b      	ldrh	r3, [r3, #8]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fb10 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 8000690:	2002      	movs	r0, #2
 8000692:	f7ff ff37 	bl	8000504 <Delay_us>

	uint16_t errorTime = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	817b      	strh	r3, [r7, #10]
	while (HAL_GPIO_ReadPin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin) != GPIO_PIN_RESET) {
 800069a:	e00d      	b.n	80006b8 <dfr_i2c_write_byte+0xb8>
		Delay_us(I2C_CYCLE_BEFORE);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff31 	bl	8000504 <Delay_us>
		errorTime++;
 80006a2:	897b      	ldrh	r3, [r7, #10]
 80006a4:	3301      	adds	r3, #1
 80006a6:	817b      	strh	r3, [r7, #10]
		if (errorTime > 100) { // No ACK from slave, generate stop condition and return error
 80006a8:	897b      	ldrh	r3, [r7, #10]
 80006aa:	2b64      	cmp	r3, #100	; 0x64
 80006ac:	d904      	bls.n	80006b8 <dfr_i2c_write_byte+0xb8>
			dfr_i2c_stop(gp8xxx);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff7d 	bl	80005ae <dfr_i2c_stop>
			return HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e016      	b.n	80006e6 <dfr_i2c_write_byte+0xe6>
	while (HAL_GPIO_ReadPin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin) != GPIO_PIN_RESET) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	8a1b      	ldrh	r3, [r3, #16]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f001 fadc 	bl	8001c80 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1e6      	bne.n	800069c <dfr_i2c_write_byte+0x9c>
		}
	}
	// ACK received as 0
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6858      	ldr	r0, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	891b      	ldrh	r3, [r3, #8]
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	f001 fae9 	bl	8001cb0 <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 80006de:	2002      	movs	r0, #2
 80006e0:	f7ff ff10 	bl	8000504 <Delay_us>
	return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <GP8XXX_IIC_begin>:

void GP8XXX_IIC_begin(DFRobot_GP8XXX_IIC *gp8xxx, eDAC_Name_t dac_name,
		uint8_t Addr, GPIO_TypeDef *SCL_port, uint16_t SCL_pin,
		GPIO_TypeDef *SDA_port, uint16_t SDA_pin) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0a0      	sub	sp, #128	; 0x80
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	72fb      	strb	r3, [r7, #11]
 80006fe:	4613      	mov	r3, r2
 8000700:	72bb      	strb	r3, [r7, #10]

	 // Set I2C port and pin configurations

	gp8xxx->I2C_scl_port = SCL_port;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	605a      	str	r2, [r3, #4]
	gp8xxx->I2C_scl_pin = SCL_pin;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 800070e:	811a      	strh	r2, [r3, #8]
	gp8xxx->I2C_sda_port = SDA_port;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000716:	60da      	str	r2, [r3, #12]
	gp8xxx->I2C_sda_pin = SDA_pin;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800071e:	821a      	strh	r2, [r3, #16]

	/* Enable GPIO clock for SCL port */
	switch ((uint32_t) gp8xxx->I2C_scl_port) {
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a93      	ldr	r2, [pc, #588]	; (8000974 <GP8XXX_IIC_begin+0x284>)
 8000726:	4293      	cmp	r3, r2
 8000728:	f000 80c8 	beq.w	80008bc <GP8XXX_IIC_begin+0x1cc>
 800072c:	4a91      	ldr	r2, [pc, #580]	; (8000974 <GP8XXX_IIC_begin+0x284>)
 800072e:	4293      	cmp	r3, r2
 8000730:	f200 80d1 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 8000734:	4a90      	ldr	r2, [pc, #576]	; (8000978 <GP8XXX_IIC_begin+0x288>)
 8000736:	4293      	cmp	r3, r2
 8000738:	f000 80b3 	beq.w	80008a2 <GP8XXX_IIC_begin+0x1b2>
 800073c:	4a8e      	ldr	r2, [pc, #568]	; (8000978 <GP8XXX_IIC_begin+0x288>)
 800073e:	4293      	cmp	r3, r2
 8000740:	f200 80c9 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 8000744:	4a8d      	ldr	r2, [pc, #564]	; (800097c <GP8XXX_IIC_begin+0x28c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	f000 809e 	beq.w	8000888 <GP8XXX_IIC_begin+0x198>
 800074c:	4a8b      	ldr	r2, [pc, #556]	; (800097c <GP8XXX_IIC_begin+0x28c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	f200 80c1 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 8000754:	4a8a      	ldr	r2, [pc, #552]	; (8000980 <GP8XXX_IIC_begin+0x290>)
 8000756:	4293      	cmp	r3, r2
 8000758:	f000 8089 	beq.w	800086e <GP8XXX_IIC_begin+0x17e>
 800075c:	4a88      	ldr	r2, [pc, #544]	; (8000980 <GP8XXX_IIC_begin+0x290>)
 800075e:	4293      	cmp	r3, r2
 8000760:	f200 80b9 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 8000764:	4a87      	ldr	r2, [pc, #540]	; (8000984 <GP8XXX_IIC_begin+0x294>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d074      	beq.n	8000854 <GP8XXX_IIC_begin+0x164>
 800076a:	4a86      	ldr	r2, [pc, #536]	; (8000984 <GP8XXX_IIC_begin+0x294>)
 800076c:	4293      	cmp	r3, r2
 800076e:	f200 80b2 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 8000772:	4a85      	ldr	r2, [pc, #532]	; (8000988 <GP8XXX_IIC_begin+0x298>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d060      	beq.n	800083a <GP8XXX_IIC_begin+0x14a>
 8000778:	4a83      	ldr	r2, [pc, #524]	; (8000988 <GP8XXX_IIC_begin+0x298>)
 800077a:	4293      	cmp	r3, r2
 800077c:	f200 80ab 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 8000780:	4a82      	ldr	r2, [pc, #520]	; (800098c <GP8XXX_IIC_begin+0x29c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d04c      	beq.n	8000820 <GP8XXX_IIC_begin+0x130>
 8000786:	4a81      	ldr	r2, [pc, #516]	; (800098c <GP8XXX_IIC_begin+0x29c>)
 8000788:	4293      	cmp	r3, r2
 800078a:	f200 80a4 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 800078e:	4a80      	ldr	r2, [pc, #512]	; (8000990 <GP8XXX_IIC_begin+0x2a0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d038      	beq.n	8000806 <GP8XXX_IIC_begin+0x116>
 8000794:	4a7e      	ldr	r2, [pc, #504]	; (8000990 <GP8XXX_IIC_begin+0x2a0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	f200 809d 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 800079c:	4a7d      	ldr	r2, [pc, #500]	; (8000994 <GP8XXX_IIC_begin+0x2a4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d024      	beq.n	80007ec <GP8XXX_IIC_begin+0xfc>
 80007a2:	4a7c      	ldr	r2, [pc, #496]	; (8000994 <GP8XXX_IIC_begin+0x2a4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	f200 8096 	bhi.w	80008d6 <GP8XXX_IIC_begin+0x1e6>
 80007aa:	4a7b      	ldr	r2, [pc, #492]	; (8000998 <GP8XXX_IIC_begin+0x2a8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d003      	beq.n	80007b8 <GP8XXX_IIC_begin+0xc8>
 80007b0:	4a7a      	ldr	r2, [pc, #488]	; (800099c <GP8XXX_IIC_begin+0x2ac>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d00d      	beq.n	80007d2 <GP8XXX_IIC_begin+0xe2>
		break;
	case GPIOK_BASE:
		__HAL_RCC_GPIOK_CLK_ENABLE();
		break;
	default:
		break;
 80007b6:	e08e      	b.n	80008d6 <GP8XXX_IIC_begin+0x1e6>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b79      	ldr	r3, [pc, #484]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a78      	ldr	r2, [pc, #480]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
 80007c4:	4b76      	ldr	r3, [pc, #472]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80007ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		break;
 80007d0:	e082      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a72      	ldr	r2, [pc, #456]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b70      	ldr	r3, [pc, #448]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	667b      	str	r3, [r7, #100]	; 0x64
 80007e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
		break;
 80007ea:	e075      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b6c      	ldr	r3, [pc, #432]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a6b      	ldr	r2, [pc, #428]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b69      	ldr	r3, [pc, #420]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	663b      	str	r3, [r7, #96]	; 0x60
 8000802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		break;
 8000804:	e068      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b66      	ldr	r3, [pc, #408]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a65      	ldr	r2, [pc, #404]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b63      	ldr	r3, [pc, #396]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800081c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		break;
 800081e:	e05b      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000820:	4b5f      	ldr	r3, [pc, #380]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	4a5e      	ldr	r2, [pc, #376]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6313      	str	r3, [r2, #48]	; 0x30
 800082c:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	65bb      	str	r3, [r7, #88]	; 0x58
 8000836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		break;
 8000838:	e04e      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b59      	ldr	r3, [pc, #356]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a58      	ldr	r2, [pc, #352]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b56      	ldr	r3, [pc, #344]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	657b      	str	r3, [r7, #84]	; 0x54
 8000850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		break;
 8000852:	e041      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000854:	4b52      	ldr	r3, [pc, #328]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a51      	ldr	r2, [pc, #324]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800085a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085e:	6313      	str	r3, [r2, #48]	; 0x30
 8000860:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	653b      	str	r3, [r7, #80]	; 0x50
 800086a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		break;
 800086c:	e034      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4b      	ldr	r2, [pc, #300]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		break;
 8000886:	e027      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8000888:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a44      	ldr	r2, [pc, #272]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
 800089e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		break;
 80008a0:	e01a      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 80008a2:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a3e      	ldr	r2, [pc, #248]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80008a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
 80008b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		break;
 80008ba:	e00d      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOK_CLK_ENABLE();
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80008c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
 80008c8:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <GP8XXX_IIC_begin+0x2b0>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
 80008d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		break;
 80008d4:	e000      	b.n	80008d8 <GP8XXX_IIC_begin+0x1e8>
		break;
 80008d6:	bf00      	nop
	}

	/* Enable GPIO clock for SDA port */
	switch ((uint32_t) gp8xxx->I2C_sda_port) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a25      	ldr	r2, [pc, #148]	; (8000974 <GP8XXX_IIC_begin+0x284>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	f000 80e2 	beq.w	8000aa8 <GP8XXX_IIC_begin+0x3b8>
 80008e4:	4a23      	ldr	r2, [pc, #140]	; (8000974 <GP8XXX_IIC_begin+0x284>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	f200 80eb 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <GP8XXX_IIC_begin+0x288>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	f000 80cd 	beq.w	8000a8e <GP8XXX_IIC_begin+0x39e>
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <GP8XXX_IIC_begin+0x288>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	f200 80e3 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 80008fc:	4a1f      	ldr	r2, [pc, #124]	; (800097c <GP8XXX_IIC_begin+0x28c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	f000 80b8 	beq.w	8000a74 <GP8XXX_IIC_begin+0x384>
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <GP8XXX_IIC_begin+0x28c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	f200 80db 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 800090c:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <GP8XXX_IIC_begin+0x290>)
 800090e:	4293      	cmp	r3, r2
 8000910:	f000 80a3 	beq.w	8000a5a <GP8XXX_IIC_begin+0x36a>
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <GP8XXX_IIC_begin+0x290>)
 8000916:	4293      	cmp	r3, r2
 8000918:	f200 80d3 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <GP8XXX_IIC_begin+0x294>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f000 808e 	beq.w	8000a40 <GP8XXX_IIC_begin+0x350>
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <GP8XXX_IIC_begin+0x294>)
 8000926:	4293      	cmp	r3, r2
 8000928:	f200 80cb 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 800092c:	4a16      	ldr	r2, [pc, #88]	; (8000988 <GP8XXX_IIC_begin+0x298>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d079      	beq.n	8000a26 <GP8XXX_IIC_begin+0x336>
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <GP8XXX_IIC_begin+0x298>)
 8000934:	4293      	cmp	r3, r2
 8000936:	f200 80c4 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <GP8XXX_IIC_begin+0x29c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d065      	beq.n	8000a0c <GP8XXX_IIC_begin+0x31c>
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <GP8XXX_IIC_begin+0x29c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	f200 80bd 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <GP8XXX_IIC_begin+0x2a0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d051      	beq.n	80009f2 <GP8XXX_IIC_begin+0x302>
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <GP8XXX_IIC_begin+0x2a0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	f200 80b6 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <GP8XXX_IIC_begin+0x2a4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d03d      	beq.n	80009d8 <GP8XXX_IIC_begin+0x2e8>
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <GP8XXX_IIC_begin+0x2a4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	f200 80af 	bhi.w	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <GP8XXX_IIC_begin+0x2a8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01c      	beq.n	80009a4 <GP8XXX_IIC_begin+0x2b4>
 800096a:	4a0c      	ldr	r2, [pc, #48]	; (800099c <GP8XXX_IIC_begin+0x2ac>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d026      	beq.n	80009be <GP8XXX_IIC_begin+0x2ce>
		break;
	case GPIOK_BASE:
		__HAL_RCC_GPIOK_CLK_ENABLE();
		break;
	default:
		break;
 8000970:	e0a7      	b.n	8000ac2 <GP8XXX_IIC_begin+0x3d2>
 8000972:	bf00      	nop
 8000974:	40022800 	.word	0x40022800
 8000978:	40022400 	.word	0x40022400
 800097c:	40022000 	.word	0x40022000
 8000980:	40021c00 	.word	0x40021c00
 8000984:	40021800 	.word	0x40021800
 8000988:	40021400 	.word	0x40021400
 800098c:	40021000 	.word	0x40021000
 8000990:	40020c00 	.word	0x40020c00
 8000994:	40020800 	.word	0x40020800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40023800 	.word	0x40023800
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b7a      	ldr	r3, [pc, #488]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a79      	ldr	r2, [pc, #484]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b77      	ldr	r3, [pc, #476]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		break;
 80009bc:	e082      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b74      	ldr	r3, [pc, #464]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a73      	ldr	r2, [pc, #460]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b71      	ldr	r3, [pc, #452]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80009d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		break;
 80009d6:	e075      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b6d      	ldr	r3, [pc, #436]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a6c      	ldr	r2, [pc, #432]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
 80009e4:	4b6a      	ldr	r3, [pc, #424]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
 80009ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80009f0:	e068      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b67      	ldr	r3, [pc, #412]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a66      	ldr	r2, [pc, #408]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b64      	ldr	r3, [pc, #400]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
 8000a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 8000a0a:	e05b      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0c:	4b60      	ldr	r3, [pc, #384]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a5f      	ldr	r2, [pc, #380]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b5d      	ldr	r3, [pc, #372]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 8000a24:	e04e      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a26:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a59      	ldr	r2, [pc, #356]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b57      	ldr	r3, [pc, #348]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8000a3e:	e041      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4c:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8000a58:	e034      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a4c      	ldr	r2, [pc, #304]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	6a3b      	ldr	r3, [r7, #32]
		break;
 8000a72:	e027      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8000a74:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
		break;
 8000a8c:	e01a      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a3f      	ldr	r2, [pc, #252]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
		break;
 8000aa6:	e00d      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOK_CLK_ENABLE();
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <GP8XXX_IIC_begin+0x4a0>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
		break;
 8000ac0:	e000      	b.n	8000ac4 <GP8XXX_IIC_begin+0x3d4>
		break;
 8000ac2:	bf00      	nop
	}

	// Configure GPIO pins for I2C
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ac4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = gp8xxx->I2C_scl_pin | gp8xxx->I2C_sda_pin;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	891a      	ldrh	r2, [r3, #8]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8a1b      	ldrh	r3, [r3, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ae2:	2311      	movs	r3, #17
 8000ae4:	673b      	str	r3, [r7, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	677b      	str	r3, [r7, #116]	; 0x74
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_GPIO_Init(gp8xxx->I2C_scl_port, &GPIO_InitStruct);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 ff15 	bl	8001928 <HAL_GPIO_Init>
	HAL_GPIO_Init(gp8xxx->I2C_sda_port, &GPIO_InitStruct);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 ff0d 	bl	8001928 <HAL_GPIO_Init>


	// Set DAC model, resolution, and device address
	gp8xxx->deviceAddr = Addr;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	7aba      	ldrb	r2, [r7, #10]
 8000b12:	70da      	strb	r2, [r3, #3]
	gp8xxx->DAC_Name = dac_name;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	7afa      	ldrb	r2, [r7, #11]
 8000b18:	709a      	strb	r2, [r3, #2]

	switch (gp8xxx->DAC_Name) {
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d82a      	bhi.n	8000b78 <GP8XXX_IIC_begin+0x488>
 8000b22:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <GP8XXX_IIC_begin+0x438>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000b45 	.word	0x08000b45
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b45 	.word	0x08000b45
 8000b34:	08000b5f 	.word	0x08000b5f
 8000b38:	08000b6f 	.word	0x08000b6f
 8000b3c:	08000b55 	.word	0x08000b55
 8000b40:	08000b6f 	.word	0x08000b6f
	case GP8211_identifier:
	case GP8211S_identifier:
	case GP8512_identifier:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000b4a:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2258      	movs	r2, #88	; 0x58
 8000b50:	70da      	strb	r2, [r3, #3]

		break;
 8000b52:	e019      	b.n	8000b88 <GP8XXX_IIC_begin+0x498>
	case GP8413_identifier:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000b5a:	801a      	strh	r2, [r3, #0]
		break;
 8000b5c:	e014      	b.n	8000b88 <GP8XXX_IIC_begin+0x498>

	case GP8302_identifier:
		gp8xxx->resolution = RESOLUTION_12_BIT;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b64:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2258      	movs	r2, #88	; 0x58
 8000b6a:	70da      	strb	r2, [r3, #3]
		break;
 8000b6c:	e00c      	b.n	8000b88 <GP8XXX_IIC_begin+0x498>

	case GP8503_identifier:
	case GP8403_identifier:
		gp8xxx->resolution = RESOLUTION_12_BIT;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b74:	801a      	strh	r2, [r3, #0]
		break;
 8000b76:	e007      	b.n	8000b88 <GP8XXX_IIC_begin+0x498>

	default:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000b7e:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2258      	movs	r2, #88	; 0x58
 8000b84:	70da      	strb	r2, [r3, #3]
		break;
 8000b86:	bf00      	nop

	}

}
 8000b88:	bf00      	nop
 8000b8a:	3780      	adds	r7, #128	; 0x80
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <GP8XXX_IIC_setDACOutRange>:

int GP8XXX_IIC_setDACOutRange(DFRobot_GP8XXX_IIC *gp8xxx, eOutPutRange_t range) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]

// only for 8402, 8413, 8211s, 8211, 8101

	uint8_t data = 0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

	switch (range) {
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d007      	beq.n	8000bba <GP8XXX_IIC_setDACOutRange+0x26>
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d102      	bne.n	8000bb4 <GP8XXX_IIC_setDACOutRange+0x20>

	case eOutputRange5V:
		break;

	case eOutputRange10V:
		data = 0x11;
 8000bae:	2311      	movs	r3, #17
 8000bb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb2:	e003      	b.n	8000bbc <GP8XXX_IIC_setDACOutRange+0x28>

	default:
		data = 0x00;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb8:	e000      	b.n	8000bbc <GP8XXX_IIC_setDACOutRange+0x28>
		break;
 8000bba:	bf00      	nop

	}

	// Generate start condition
	dfr_i2c_start(gp8xxx);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fcc5 	bl	800054c <dfr_i2c_start>

	// Send device address
	dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	78db      	ldrb	r3, [r3, #3]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fd17 	bl	8000600 <dfr_i2c_write_byte>

	// Send register address
	dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG >> 1);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fd13 	bl	8000600 <dfr_i2c_write_byte>

	// Send voltage data
	dfr_i2c_write_byte(gp8xxx,data);
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fd0e 	bl	8000600 <dfr_i2c_write_byte>

	// Generate stop condition
	dfr_i2c_stop(gp8xxx);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fce2 	bl	80005ae <dfr_i2c_stop>

	return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <GP8XXX_IIC_setDACOutVoltage>:

int GP8XXX_IIC_setDACOutVoltage(DFRobot_GP8XXX_IIC *gp8xxx, uint16_t voltage,
		uint8_t channel) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	4613      	mov	r3, r2
 8000c02:	707b      	strb	r3, [r7, #1]

	// Set initial state of I2C lines
	if (voltage > gp8xxx->resolution)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	887a      	ldrh	r2, [r7, #2]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d902      	bls.n	8000c14 <GP8XXX_IIC_setDACOutVoltage+0x20>
		voltage = gp8xxx->resolution;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	807b      	strh	r3, [r7, #2]

	if (gp8xxx->resolution == RESOLUTION_12_BIT) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d103      	bne.n	8000c28 <GP8XXX_IIC_setDACOutVoltage+0x34>
		voltage = voltage << 4;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	807b      	strh	r3, [r7, #2]
 8000c26:	e008      	b.n	8000c3a <GP8XXX_IIC_setDACOutVoltage+0x46>

	} else if (gp8xxx->resolution == RESOLUTION_15_BIT) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d102      	bne.n	8000c3a <GP8XXX_IIC_setDACOutVoltage+0x46>
		voltage = voltage << 1;
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	807b      	strh	r3, [r7, #2]

	}

	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	733b      	strb	r3, [r7, #12]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	737b      	strb	r3, [r7, #13]
			(uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8) };
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	b2db      	uxtb	r3, r3
	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 8000c4e:	73bb      	strb	r3, [r7, #14]
			(uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8) };
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b2db      	uxtb	r3, r3
	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 8000c58:	73fb      	strb	r3, [r7, #15]

	if (channel == 0) {
 8000c5a:	787b      	ldrb	r3, [r7, #1]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d11d      	bne.n	8000c9c <GP8XXX_IIC_setDACOutVoltage+0xa8>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fc73 	bl	800054c <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	78db      	ldrb	r3, [r3, #3]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fcc5 	bl	8000600 <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG);
 8000c76:	2102      	movs	r1, #2
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fcc1 	bl	8000600 <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 8000c7e:	7b3b      	ldrb	r3, [r7, #12]
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fcbc 	bl	8000600 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 8000c88:	7b7b      	ldrb	r3, [r7, #13]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fcb7 	bl	8000600 <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fc8b 	bl	80005ae <dfr_i2c_stop>

		return HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e04c      	b.n	8000d36 <GP8XXX_IIC_setDACOutVoltage+0x142>

	} else if (channel == 1) {
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d11d      	bne.n	8000cde <GP8XXX_IIC_setDACOutVoltage+0xea>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fc52 	bl	800054c <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fca4 	bl	8000600 <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG << 1);
 8000cb8:	2104      	movs	r1, #4
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fca0 	bl	8000600 <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff fc9b 	bl	8000600 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 8000cca:	7b7b      	ldrb	r3, [r7, #13]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fc96 	bl	8000600 <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff fc6a 	bl	80005ae <dfr_i2c_stop>

		return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e02b      	b.n	8000d36 <GP8XXX_IIC_setDACOutVoltage+0x142>

	} else if (channel == 2) {
 8000cde:	787b      	ldrb	r3, [r7, #1]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d127      	bne.n	8000d34 <GP8XXX_IIC_setDACOutVoltage+0x140>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fc31 	bl	800054c <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	78db      	ldrb	r3, [r3, #3]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fc83 	bl	8000600 <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG);
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fc7f 	bl	8000600 <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 8000d02:	7b3b      	ldrb	r3, [r7, #12]
 8000d04:	4619      	mov	r1, r3
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fc7a 	bl	8000600 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff fc75 	bl	8000600 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[2]);
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fc70 	bl	8000600 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[3]);
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fc6b 	bl	8000600 <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fc3f 	bl	80005ae <dfr_i2c_stop>
		return HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e000      	b.n	8000d36 <GP8XXX_IIC_setDACOutVoltage+0x142>
	} else
		return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1

}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fc80 	bl	800164a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f84b 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f909 	bl	8000f64 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d52:	f000 f8ad 	bl	8000eb0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000d56:	213c      	movs	r1, #60	; 0x3c
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <main+0x7c>)
 8000d5a:	f001 fd23 	bl	80027a4 <HAL_TIM_Encoder_Start_IT>

	init_encoder(&enc_instance_M1);
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <main+0x80>)
 8000d60:	f000 fad2 	bl	8001308 <init_encoder>

	set_pid_gain(&pid_instance_M1, 5, 0.5, 0.0); // set gains
 8000d64:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000dc4 <main+0x84>
 8000d68:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000d6c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <main+0x88>)
 8000d72:	f000 fa26 	bl	80011c2 <set_pid_gain>

	RPM_k = (float) 60.0 / (PPR * gear_ratio); // to calculate RPM form ticks/s
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <main+0x8c>)
 8000d78:	ed93 7a00 	vldr	s14, [r3]
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <main+0x90>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d86:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000dd4 <main+0x94>
 8000d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <main+0x98>)
 8000d90:	edc3 7a00 	vstr	s15, [r3]

	GP8XXX_IIC_begin(&gp8211s, GP8211S_identifier, 0x58, GPIOB, GPIO_PIN_8,
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <main+0x9c>)
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <main+0x9c>)
 8000da6:	2258      	movs	r2, #88	; 0x58
 8000da8:	2101      	movs	r1, #1
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <main+0xa0>)
 8000dac:	f7ff fca0 	bl	80006f0 <GP8XXX_IIC_begin>
	GPIOB, GPIO_PIN_9);

	GP8XXX_IIC_setDACOutRange(&gp8211s, eOutputRange10V); // 5V or 10V
 8000db0:	2102      	movs	r1, #2
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <main+0xa0>)
 8000db4:	f7ff feee 	bl	8000b94 <GP8XXX_IIC_setDACOutRange>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000db8:	e7fe      	b.n	8000db8 <main+0x78>
 8000dba:	bf00      	nop
 8000dbc:	20000038 	.word	0x20000038
 8000dc0:	20000098 	.word	0x20000098
 8000dc4:	00000000 	.word	0x00000000
 8000dc8:	200000a8 	.word	0x200000a8
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	42700000 	.word	0x42700000
 8000dd8:	200000c4 	.word	0x200000c4
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	20000084 	.word	0x20000084

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2230      	movs	r2, #48	; 0x30
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 f83c 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <SystemClock_Config+0xc4>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <SystemClock_Config+0xc4>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <SystemClock_Config+0xc4>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <SystemClock_Config+0xc8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e28:	4a20      	ldr	r2, [pc, #128]	; (8000eac <SystemClock_Config+0xc8>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <SystemClock_Config+0xc8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e54:	2348      	movs	r3, #72	; 0x48
 8000e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 ff61 	bl	8001d2c <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e70:	f000 f9a2 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 f9ef 	bl	8002274 <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000e9c:	f000 f98c 	bl	80011b8 <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3750      	adds	r7, #80	; 0x50
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2224      	movs	r2, #36	; 0x24
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 ffd6 	bl	8002e70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000ed0:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <MX_TIM1_Init+0xb0>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000efa:	2303      	movs	r3, #3
 8000efc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000efe:	2302      	movs	r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000f26:	f001 fb97 	bl	8002658 <HAL_TIM_Encoder_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000f30:	f000 f942 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_TIM1_Init+0xac>)
 8000f46:	f001 fee7 	bl	8002d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f50:	f000 f932 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000038 	.word	0x20000038
 8000f60:	40010000 	.word	0x40010000

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a88      	ldr	r2, [pc, #544]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b86      	ldr	r3, [pc, #536]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f92:	4b83      	ldr	r3, [pc, #524]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b80      	ldr	r3, [pc, #512]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b7d      	ldr	r3, [pc, #500]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a7c      	ldr	r2, [pc, #496]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b7a      	ldr	r3, [pc, #488]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b77      	ldr	r3, [pc, #476]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a76      	ldr	r2, [pc, #472]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b74      	ldr	r3, [pc, #464]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a70      	ldr	r2, [pc, #448]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a6a      	ldr	r2, [pc, #424]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <MX_GPIO_Init+0x23c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a64      	ldr	r2, [pc, #400]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <MX_GPIO_Init+0x23c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f244 0181 	movw	r1, #16513	; 0x4081
 8001028:	485e      	ldr	r0, [pc, #376]	; (80011a4 <MX_GPIO_Init+0x240>)
 800102a:	f000 fe41 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	485d      	ldr	r0, [pc, #372]	; (80011a8 <MX_GPIO_Init+0x244>)
 8001034:	f000 fe3c 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4857      	ldr	r0, [pc, #348]	; (80011ac <MX_GPIO_Init+0x248>)
 8001050:	f000 fc6a 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001054:	2332      	movs	r3, #50	; 0x32
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	484f      	ldr	r0, [pc, #316]	; (80011ac <MX_GPIO_Init+0x248>)
 8001070:	f000 fc5a 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001074:	2386      	movs	r3, #134	; 0x86
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001084:	230b      	movs	r3, #11
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4848      	ldr	r0, [pc, #288]	; (80011b0 <MX_GPIO_Init+0x24c>)
 8001090:	f000 fc4a 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001094:	f244 0381 	movw	r3, #16513	; 0x4081
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	483d      	ldr	r0, [pc, #244]	; (80011a4 <MX_GPIO_Init+0x240>)
 80010ae:	f000 fc3b 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c4:	230b      	movs	r3, #11
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4835      	ldr	r0, [pc, #212]	; (80011a4 <MX_GPIO_Init+0x240>)
 80010d0:	f000 fc2a 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e6:	2307      	movs	r3, #7
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4830      	ldr	r0, [pc, #192]	; (80011b4 <MX_GPIO_Init+0x250>)
 80010f2:	f000 fc19 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010f6:	2340      	movs	r3, #64	; 0x40
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <MX_GPIO_Init+0x244>)
 800110e:	f000 fc0b 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4820      	ldr	r0, [pc, #128]	; (80011a8 <MX_GPIO_Init+0x244>)
 8001126:	f000 fbff 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800112a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800113c:	230a      	movs	r3, #10
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_GPIO_Init+0x24c>)
 8001148:	f000 fbee 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800114c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_GPIO_Init+0x24c>)
 8001162:	f000 fbe1 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001166:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001178:	230b      	movs	r3, #11
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <MX_GPIO_Init+0x244>)
 8001184:	f000 fbd0 	bl	8001928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f000 fb94 	bl	80018ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	; 0x28
 8001194:	f000 fbad 	bl	80018f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>

080011c2 <set_pid_gain>:
#define INTEGRAL_GAIN_MAX 20000
#define PID_MAX 32767


// Set PID gains
void set_pid_gain(pid_instance_int16 *pid_instance, float p, float i, float d) {
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80011ce:	edc7 0a01 	vstr	s1, [r7, #4]
 80011d2:	ed87 1a00 	vstr	s2, [r7]
	pid_instance->p_gain = p;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	601a      	str	r2, [r3, #0]
	pid_instance->i_gain = i;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	605a      	str	r2, [r3, #4]
	pid_instance->d_gain = d;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	609a      	str	r2, [r3, #8]

}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <apply_pid>:
	pid_instance->d_gain = 0;
	pid_instance->error_integral = 0;
}

void apply_pid(pid_instance_int16 *pid_instance, float input_error,
		float dt) {
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001200:	edc7 0a01 	vstr	s1, [r7, #4]
	pid_instance->error_integral += input_error * dt;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	ed93 7a04 	vldr	s14, [r3, #16]
 800120a:	edd7 6a02 	vldr	s13, [r7, #8]
 800120e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edc3 7a04 	vstr	s15, [r3, #16]

	// Limit integral gain
	if (pid_instance->error_integral > INTEGRAL_GAIN_MAX) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	edd3 7a04 	vldr	s15, [r3, #16]
 8001226:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80012e8 <apply_pid+0xf4>
 800122a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd02      	ble.n	800123a <apply_pid+0x46>
		pid_instance->error_integral = INTEGRAL_GAIN_MAX;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <apply_pid+0xf8>)
 8001238:	611a      	str	r2, [r3, #16]
	}

	if (pid_instance->error_integral < -INTEGRAL_GAIN_MAX) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001240:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80012f0 <apply_pid+0xfc>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d502      	bpl.n	8001254 <apply_pid+0x60>
		pid_instance->error_integral = -INTEGRAL_GAIN_MAX;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <apply_pid+0x100>)
 8001252:	611a      	str	r2, [r3, #16]
	}

	// Calculate PID output
	pid_instance->output = pid_instance->p_gain * input_error
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	ed93 7a00 	vldr	s14, [r3]
 800125a:	edd7 7a02 	vldr	s15, [r7, #8]
 800125e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ pid_instance->i_gain * (pid_instance->error_integral)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	edd3 6a01 	vldr	s13, [r3, #4]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	edd3 7a04 	vldr	s15, [r3, #16]
 800126e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001272:	ee37 7a27 	vadd.f32	s14, s14, s15
	+ pid_instance->d_gain * (input_error - pid_instance->last_error)/dt;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	edd3 6a02 	vldr	s13, [r3, #8]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001282:	ed97 6a02 	vldr	s12, [r7, #8]
 8001286:	ee76 7a67 	vsub.f32	s15, s12, s15
 800128a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800128e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001292:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance->output = pid_instance->p_gain * input_error
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edc3 7a05 	vstr	s15, [r3, #20]

	// Limit PID output
	if (pid_instance->output >= PID_MAX) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012a6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012f8 <apply_pid+0x104>
 80012aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	db02      	blt.n	80012ba <apply_pid+0xc6>
		pid_instance->output = PID_MAX;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <apply_pid+0x108>)
 80012b8:	615a      	str	r2, [r3, #20]
	}

	if (pid_instance->output <= -PID_MAX) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001300 <apply_pid+0x10c>
 80012c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d802      	bhi.n	80012d4 <apply_pid+0xe0>
		pid_instance->output = -PID_MAX;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <apply_pid+0x110>)
 80012d2:	615a      	str	r2, [r3, #20]
	}
	pid_instance->last_error = input_error;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	60da      	str	r2, [r3, #12]
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	469c4000 	.word	0x469c4000
 80012ec:	469c4000 	.word	0x469c4000
 80012f0:	c69c4000 	.word	0xc69c4000
 80012f4:	c69c4000 	.word	0xc69c4000
 80012f8:	46fffe00 	.word	0x46fffe00
 80012fc:	46fffe00 	.word	0x46fffe00
 8001300:	c6fffe00 	.word	0xc6fffe00
 8001304:	c6fffe00 	.word	0xc6fffe00

08001308 <init_encoder>:
#include "motor_encoder.h"
#include "stdio.h"

// Initialize encoder parameters
void init_encoder(encoder_instance *encoder_value) {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	encoder_value->velocity = 0;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
	encoder_value->position = 0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
	encoder_value->last_counter_value = 0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <update_encoder>:

// Update encoder values based on timer and quadrature counting
void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim) {
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]

	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim); // Get quadrature count
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	60fb      	str	r3, [r7, #12]

	encoder_value->count = (int16_t) temp_counter;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	b21a      	sxth	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	819a      	strh	r2, [r3, #12]
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80013b0 <update_encoder+0x7c>
 8001360:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (float) dt;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <update_encoder+0x80>)
 8001366:	ed93 7a00 	vldr	s14, [r3]
 800136a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a00 	vstr	s15, [r3]
	encoder_value->position += (float) encoder_value->count / (float) 4.0; //  Update position based on quadrature factor
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ed93 7a01 	vldr	s14, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001388:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800138c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edc3 7a01 	vstr	s15, [r3, #4]
	__HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	437a0000 	.word	0x437a0000
 80013b4:	2000000c 	.word	0x2000000c

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x44>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_MspInit+0x44>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <HAL_MspInit+0x44>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_MspInit+0x44>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <HAL_TIM_Encoder_MspInit+0x8c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d130      	bne.n	8001484 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001452:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <HAL_TIM_Encoder_MspInit+0x94>)
 8001470:	f000 fa5a 	bl	8001928 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	201b      	movs	r0, #27
 800147a:	f000 fa1e 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800147e:	201b      	movs	r0, #27
 8001480:	f000 fa37 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010000 	.word	0x40010000
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;  // increment the indx in every millisecond
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <SysTick_Handler+0xa4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a26      	ldr	r2, [pc, #152]	; (8001584 <SysTick_Handler+0xa4>)
 80014ec:	6013      	str	r3, [r2, #0]
	if (indx == dt) {
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <SysTick_Handler+0xa4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <SysTick_Handler+0xa8>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eeb4 7a67 	vcmp.f32	s14, s15
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	d138      	bne.n	800157c <SysTick_Handler+0x9c>
		update_encoder(&enc_instance_M1, &htim1);
 800150a:	4920      	ldr	r1, [pc, #128]	; (800158c <SysTick_Handler+0xac>)
 800150c:	4820      	ldr	r0, [pc, #128]	; (8001590 <SysTick_Handler+0xb0>)
 800150e:	f7ff ff11 	bl	8001334 <update_encoder>
		position = enc_instance_M1.position;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <SysTick_Handler+0xb0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <SysTick_Handler+0xb4>)
 8001518:	6013      	str	r3, [r2, #0]
		motor1_vel = enc_instance_M1.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <SysTick_Handler+0xb0>)
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <SysTick_Handler+0xb8>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <SysTick_Handler+0xbc>)
 800152c:	edc3 7a00 	vstr	s15, [r3]
		apply_pid(&pid_instance_M1, set - motor1_vel, dt); // apply pid
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <SysTick_Handler+0xc0>)
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <SysTick_Handler+0xbc>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <SysTick_Handler+0xa8>)
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	eef0 0a47 	vmov.f32	s1, s14
 800154a:	eeb0 0a67 	vmov.f32	s0, s15
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <SysTick_Handler+0xc4>)
 8001550:	f7ff fe50 	bl	80011f4 <apply_pid>
		GP8XXX_IIC_setDACOutVoltage(&gp8211s, pid_instance_M1.output + 16383,
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <SysTick_Handler+0xc4>)
 8001556:	edd3 7a05 	vldr	s15, [r3, #20]
 800155a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80015a8 <SysTick_Handler+0xc8>
 800155e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001566:	ee17 3a90 	vmov	r3, s15
 800156a:	b29b      	uxth	r3, r3
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <SysTick_Handler+0xcc>)
 8001572:	f7ff fb3f 	bl	8000bf4 <GP8XXX_IIC_setDACOutVoltage>
				0);
		indx = 0; // reset indx
 8001576:	4b03      	ldr	r3, [pc, #12]	; (8001584 <SysTick_Handler+0xa4>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f8a2 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200000c8 	.word	0x200000c8
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000038 	.word	0x20000038
 8001590:	20000098 	.word	0x20000098
 8001594:	200000cc 	.word	0x200000cc
 8001598:	200000c4 	.word	0x200000c4
 800159c:	200000c0 	.word	0x200000c0
 80015a0:	20000008 	.word	0x20000008
 80015a4:	200000a8 	.word	0x200000a8
 80015a8:	467ffc00 	.word	0x467ffc00
 80015ac:	20000084 	.word	0x20000084

080015b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM1_CC_IRQHandler+0x10>)
 80015b6:	f001 f9a3 	bl	8002900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000038 	.word	0x20000038

080015c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80015c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015cc:	f000 fb8a 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fc:	f7ff ffea 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001626:	f001 fc2b 	bl	8002e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fb89 	bl	8000d40 <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800163c:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 8001640:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001644:	200000d4 	.word	0x200000d4

08001648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>

0800164a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f928 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001654:	2000      	movs	r0, #0
 8001656:	f000 f805 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165a:	f7ff fead 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f943 	bl	800190e <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f90b 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000018 	.word	0x20000018
 80016c0:	20000014 	.word	0x20000014

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000018 	.word	0x20000018
 80016e8:	200000d0 	.word	0x200000d0

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200000d0 	.word	0x200000d0

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <__NVIC_SetPriorityGrouping+0x40>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	4313      	orrs	r3, r2
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x40>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	05fa0000 	.word	0x05fa0000

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff3e 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff31 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e175      	b.n	8001c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8164 	bne.w	8001c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x56>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80be 	beq.w	8001c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aca:	4a61      	ldr	r2, [pc, #388]	; (8001c50 <HAL_GPIO_Init+0x328>)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_GPIO_Init+0x32c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d037      	beq.n	8001b66 <HAL_GPIO_Init+0x23e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d031      	beq.n	8001b62 <HAL_GPIO_Init+0x23a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <HAL_GPIO_Init+0x334>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02b      	beq.n	8001b5e <HAL_GPIO_Init+0x236>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a55      	ldr	r2, [pc, #340]	; (8001c60 <HAL_GPIO_Init+0x338>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d025      	beq.n	8001b5a <HAL_GPIO_Init+0x232>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a54      	ldr	r2, [pc, #336]	; (8001c64 <HAL_GPIO_Init+0x33c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01f      	beq.n	8001b56 <HAL_GPIO_Init+0x22e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a53      	ldr	r2, [pc, #332]	; (8001c68 <HAL_GPIO_Init+0x340>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x22a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_GPIO_Init+0x344>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a51      	ldr	r2, [pc, #324]	; (8001c70 <HAL_GPIO_Init+0x348>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x222>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <HAL_GPIO_Init+0x34c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x21e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4f      	ldr	r2, [pc, #316]	; (8001c78 <HAL_GPIO_Init+0x350>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x21a>
 8001b3e:	2309      	movs	r3, #9
 8001b40:	e012      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b42:	230a      	movs	r3, #10
 8001b44:	e010      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b46:	2308      	movs	r3, #8
 8001b48:	e00e      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e00c      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e00a      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b52:	2305      	movs	r3, #5
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x240>
 8001b66:	2300      	movs	r3, #0
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b78:	4935      	ldr	r1, [pc, #212]	; (8001c50 <HAL_GPIO_Init+0x328>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001baa:	4a34      	ldr	r2, [pc, #208]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bda:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_GPIO_Init+0x354>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	f67f ae86 	bls.w	8001948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40013800 	.word	0x40013800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40021400 	.word	0x40021400
 8001c6c:	40021800 	.word	0x40021800
 8001c70:	40021c00 	.word	0x40021c00
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40022400 	.word	0x40022400
 8001c7c:	40013c00 	.word	0x40013c00

08001c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f806 	bl	8001d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e291      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d50:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d00c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5c:	4b93      	ldr	r3, [pc, #588]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d112      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62>
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b8d      	ldr	r3, [pc, #564]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d06c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x130>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d168      	bne.n	8001e5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e26b      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x7a>
 8001d98:	4b84      	ldr	r3, [pc, #528]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a83      	ldr	r2, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e02e      	b.n	8001e04 <HAL_RCC_OscConfig+0xd8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x9c>
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e01d      	b.n	8001e04 <HAL_RCC_OscConfig+0xd8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0xc0>
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b73      	ldr	r3, [pc, #460]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a72      	ldr	r2, [pc, #456]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0xd8>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6e      	ldr	r2, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6b      	ldr	r2, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fc6e 	bl	80016ec <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fc6a 	bl	80016ec <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e21f      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe8>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc5a 	bl	80016ec <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fc56 	bl	80016ec <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e20b      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x110>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d069      	beq.n	8001f3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d11c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x190>
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e1df      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	493d      	ldr	r1, [pc, #244]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	e040      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a38      	ldr	r2, [pc, #224]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc0c 	bl	80016ec <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc08 	bl	80016ec <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1bd      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4929      	ldr	r1, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
 8001f0a:	e018      	b.n	8001f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fbe8 	bl	80016ec <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fbe4 	bl	80016ec <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e199      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d038      	beq.n	8001fbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d019      	beq.n	8001f86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fbc5 	bl	80016ec <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fbc1 	bl	80016ec <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e176      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x23a>
 8001f84:	e01a      	b.n	8001fbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff fbab 	bl	80016ec <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fba7 	bl	80016ec <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d903      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e15c      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
 8001fac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a4 	beq.w	8002112 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7e      	ldr	r2, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7ff fb6f 	bl	80016ec <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff fb6b 	bl	80016ec <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e120      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b75      	ldr	r3, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x4d0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x31a>
 8002038:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	e02d      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x33c>
 800204e:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
 8002066:	e01c      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d10c      	bne.n	800208a <HAL_RCC_OscConfig+0x35e>
 8002070:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a5d      	ldr	r2, [pc, #372]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	e00b      	b.n	80020a2 <HAL_RCC_OscConfig+0x376>
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a5a      	ldr	r2, [pc, #360]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff fb1f 	bl	80016ec <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff fb1b 	bl	80016ec <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0ce      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ee      	beq.n	80020b2 <HAL_RCC_OscConfig+0x386>
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7ff fb09 	bl	80016ec <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff fb05 	bl	80016ec <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e0b8      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f4:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80a4 	beq.w	8002264 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d06b      	beq.n	8002200 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d149      	bne.n	80021c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fad6 	bl	80016ec <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff fad2 	bl	80016ec <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e087      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	4313      	orrs	r3, r2
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800218e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff faa6 	bl	80016ec <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff faa2 	bl	80016ec <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e057      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x478>
 80021c2:	e04f      	b.n	8002264 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fa8c 	bl	80016ec <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff fa88 	bl	80016ec <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e03d      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_OscConfig+0x4cc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4ac>
 80021f6:	e035      	b.n	8002264 <HAL_RCC_OscConfig+0x538>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x544>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d028      	beq.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d11a      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002236:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0d0      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	4965      	ldr	r1, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d040      	beq.n	8002398 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d115      	bne.n	8002356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e073      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06b      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4936      	ldr	r1, [pc, #216]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002368:	f7ff f9c0 	bl	80016ec <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7ff f9bc 	bl	80016ec <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e053      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d210      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 020f 	bic.w	r2, r3, #15
 80023ae:	4922      	ldr	r1, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1cc>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1d0>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1d4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f91c 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08002ee0 	.word	0x08002ee0
 8002444:	20000010 	.word	0x20000010
 8002448:	20000014 	.word	0x20000014

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	b094      	sub	sp, #80	; 0x50
 8002452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	2300      	movs	r3, #0
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	2300      	movs	r3, #0
 800245e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002464:	4b79      	ldr	r3, [pc, #484]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d00d      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x40>
 8002470:	2b08      	cmp	r3, #8
 8002472:	f200 80e1 	bhi.w	8002638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x34>
 800247a:	2b04      	cmp	r3, #4
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x3a>
 800247e:	e0db      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_GetSysClockFreq+0x204>)
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002484:	e0db      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b73      	ldr	r3, [pc, #460]	; (8002654 <HAL_RCC_GetSysClockFreq+0x208>)
 8002488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800248a:	e0d8      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002496:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	2200      	movs	r2, #0
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024be:	4622      	mov	r2, r4
 80024c0:	462b      	mov	r3, r5
 80024c2:	f04f 0000 	mov.w	r0, #0
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	0159      	lsls	r1, r3, #5
 80024cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d0:	0150      	lsls	r0, r2, #5
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4621      	mov	r1, r4
 80024d8:	1a51      	subs	r1, r2, r1
 80024da:	6139      	str	r1, [r7, #16]
 80024dc:	4629      	mov	r1, r5
 80024de:	eb63 0301 	sbc.w	r3, r3, r1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024f0:	4659      	mov	r1, fp
 80024f2:	018b      	lsls	r3, r1, #6
 80024f4:	4651      	mov	r1, sl
 80024f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024fa:	4651      	mov	r1, sl
 80024fc:	018a      	lsls	r2, r1, #6
 80024fe:	4651      	mov	r1, sl
 8002500:	ebb2 0801 	subs.w	r8, r2, r1
 8002504:	4659      	mov	r1, fp
 8002506:	eb63 0901 	sbc.w	r9, r3, r1
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800251a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800251e:	4690      	mov	r8, r2
 8002520:	4699      	mov	r9, r3
 8002522:	4623      	mov	r3, r4
 8002524:	eb18 0303 	adds.w	r3, r8, r3
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	462b      	mov	r3, r5
 800252c:	eb49 0303 	adc.w	r3, r9, r3
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800253e:	4629      	mov	r1, r5
 8002540:	024b      	lsls	r3, r1, #9
 8002542:	4621      	mov	r1, r4
 8002544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002548:	4621      	mov	r1, r4
 800254a:	024a      	lsls	r2, r1, #9
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002552:	2200      	movs	r2, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
 8002556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800255c:	f7fd fe54 	bl	8000208 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	e058      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	2200      	movs	r2, #0
 8002572:	4618      	mov	r0, r3
 8002574:	4611      	mov	r1, r2
 8002576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
 8002580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002584:	4642      	mov	r2, r8
 8002586:	464b      	mov	r3, r9
 8002588:	f04f 0000 	mov.w	r0, #0
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	0159      	lsls	r1, r3, #5
 8002592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002596:	0150      	lsls	r0, r2, #5
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4641      	mov	r1, r8
 800259e:	ebb2 0a01 	subs.w	sl, r2, r1
 80025a2:	4649      	mov	r1, r9
 80025a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025bc:	ebb2 040a 	subs.w	r4, r2, sl
 80025c0:	eb63 050b 	sbc.w	r5, r3, fp
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	00eb      	lsls	r3, r5, #3
 80025ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d2:	00e2      	lsls	r2, r4, #3
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4643      	mov	r3, r8
 80025da:	18e3      	adds	r3, r4, r3
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	464b      	mov	r3, r9
 80025e0:	eb45 0303 	adc.w	r3, r5, r3
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f2:	4629      	mov	r1, r5
 80025f4:	028b      	lsls	r3, r1, #10
 80025f6:	4621      	mov	r1, r4
 80025f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025fc:	4621      	mov	r1, r4
 80025fe:	028a      	lsls	r2, r1, #10
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002606:	2200      	movs	r2, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	61fa      	str	r2, [r7, #28]
 800260c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002610:	f7fd fdfa 	bl	8000208 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800262c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800262e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetSysClockFreq+0x204>)
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002640:	4618      	mov	r0, r3
 8002642:	3750      	adds	r7, #80	; 0x50
 8002644:	46bd      	mov	sp, r7
 8002646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	00f42400 	.word	0x00f42400
 8002654:	007a1200 	.word	0x007a1200

08002658 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e08f      	b.n	800278c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe febd 	bl	8001400 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_TIM_Encoder_Init+0x13c>)
 800269a:	400b      	ands	r3, r1
 800269c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 fa63 	bl	8002b74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <HAL_TIM_Encoder_Init+0x140>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	4313      	orrs	r3, r2
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_TIM_Encoder_Init+0x144>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <HAL_TIM_Encoder_Init+0x148>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	4313      	orrs	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	011a      	lsls	r2, r3, #4
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	4313      	orrs	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800272e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4313      	orrs	r3, r2
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	fffebff8 	.word	0xfffebff8
 8002798:	fffffcfc 	.word	0xfffffcfc
 800279c:	fffff3f3 	.word	0xfffff3f3
 80027a0:	ffff0f0f 	.word	0xffff0f0f

080027a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d110      	bne.n	80027f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80027da:	7b7b      	ldrb	r3, [r7, #13]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e089      	b.n	80028f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f4:	e031      	b.n	800285a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d110      	bne.n	800281e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002802:	7b3b      	ldrb	r3, [r7, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d001      	beq.n	800280c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e075      	b.n	80028f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800281c:	e01d      	b.n	800285a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d108      	bne.n	8002836 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800282a:	7b7b      	ldrb	r3, [r7, #13]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d102      	bne.n	8002836 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002830:	7b3b      	ldrb	r3, [r7, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e05e      	b.n	80028f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d010      	beq.n	8002888 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002866:	e01f      	b.n	80028a8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fa2b 	bl	8002ccc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0202 	orr.w	r2, r2, #2
 8002884:	60da      	str	r2, [r3, #12]
      break;
 8002886:	e02e      	b.n	80028e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	2104      	movs	r1, #4
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fa1b 	bl	8002ccc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0204 	orr.w	r2, r2, #4
 80028a4:	60da      	str	r2, [r3, #12]
      break;
 80028a6:	e01e      	b.n	80028e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fa0b 	bl	8002ccc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2201      	movs	r2, #1
 80028bc:	2104      	movs	r1, #4
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa04 	bl	8002ccc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0202 	orr.w	r2, r2, #2
 80028d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0204 	orr.w	r2, r2, #4
 80028e2:	60da      	str	r2, [r3, #12]
      break;
 80028e4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d020      	beq.n	8002964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0202 	mvn.w	r2, #2
 8002934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8f3 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8e5 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f8f6 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d020      	beq.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01b      	beq.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0204 	mvn.w	r2, #4
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8cd 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8bf 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f8d0 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d020      	beq.n	80029fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0208 	mvn.w	r2, #8
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2204      	movs	r2, #4
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8a7 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f899 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8aa 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d020      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0210 	mvn.w	r2, #16
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f881 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f873 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f884 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00c      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0201 	mvn.w	r2, #1
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f851 	bl	8002b0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00c      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9d7 	bl	8002e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00c      	beq.n	8002abe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f9cf 	bl	8002e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f83e 	bl	8002b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f06f 0220 	mvn.w	r2, #32
 8002afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f997 	bl	8002e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a46      	ldr	r2, [pc, #280]	; (8002ca0 <TIM_Base_SetConfig+0x12c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d00f      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a43      	ldr	r2, [pc, #268]	; (8002ca4 <TIM_Base_SetConfig+0x130>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00b      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a42      	ldr	r2, [pc, #264]	; (8002ca8 <TIM_Base_SetConfig+0x134>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a41      	ldr	r2, [pc, #260]	; (8002cac <TIM_Base_SetConfig+0x138>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a40      	ldr	r2, [pc, #256]	; (8002cb0 <TIM_Base_SetConfig+0x13c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d108      	bne.n	8002bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <TIM_Base_SetConfig+0x12c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d027      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <TIM_Base_SetConfig+0x130>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d023      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <TIM_Base_SetConfig+0x134>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01f      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a30      	ldr	r2, [pc, #192]	; (8002cac <TIM_Base_SetConfig+0x138>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01b      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <TIM_Base_SetConfig+0x13c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d017      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2e      	ldr	r2, [pc, #184]	; (8002cb4 <TIM_Base_SetConfig+0x140>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <TIM_Base_SetConfig+0x144>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00f      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <TIM_Base_SetConfig+0x148>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <TIM_Base_SetConfig+0x14c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <TIM_Base_SetConfig+0x150>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <TIM_Base_SetConfig+0x154>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <TIM_Base_SetConfig+0x12c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0xf8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <TIM_Base_SetConfig+0x13c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d103      	bne.n	8002c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]
  }
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	40000c00 	.word	0x40000c00
 8002cb0:	40010400 	.word	0x40010400
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	40001800 	.word	0x40001800
 8002cc4:	40001c00 	.word	0x40001c00
 8002cc8:	40002000 	.word	0x40002000

08002ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2201      	movs	r2, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e06d      	b.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a30      	ldr	r2, [pc, #192]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d01d      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10c      	bne.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40010400 	.word	0x40010400
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40000c00 	.word	0x40000c00
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40001800 	.word	0x40001800

08002e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <memset>:
 8002e70:	4402      	add	r2, r0
 8002e72:	4603      	mov	r3, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	4d0d      	ldr	r5, [pc, #52]	; (8002eb8 <__libc_init_array+0x38>)
 8002e84:	4c0d      	ldr	r4, [pc, #52]	; (8002ebc <__libc_init_array+0x3c>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	4d0b      	ldr	r5, [pc, #44]	; (8002ec0 <__libc_init_array+0x40>)
 8002e92:	4c0c      	ldr	r4, [pc, #48]	; (8002ec4 <__libc_init_array+0x44>)
 8002e94:	f000 f818 	bl	8002ec8 <_init>
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08002ef8 	.word	0x08002ef8
 8002ebc:	08002ef8 	.word	0x08002ef8
 8002ec0:	08002ef8 	.word	0x08002ef8
 8002ec4:	08002efc 	.word	0x08002efc

08002ec8 <_init>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr

08002ed4 <_fini>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr
